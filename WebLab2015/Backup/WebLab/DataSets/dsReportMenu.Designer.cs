//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WebLab.DataSets {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsReportMenu")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsReportMenu : global::System.Data.DataSet {
        
        private DatewiseReportMenuDataTable tableDatewiseReportMenu;
        
        private TestwiseHistoryReportMenuDataTable tableTestwiseHistoryReportMenu;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsReportMenu() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsReportMenu(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DatewiseReportMenu"] != null)) {
                    base.Tables.Add(new DatewiseReportMenuDataTable(ds.Tables["DatewiseReportMenu"]));
                }
                if ((ds.Tables["TestwiseHistoryReportMenu"] != null)) {
                    base.Tables.Add(new TestwiseHistoryReportMenuDataTable(ds.Tables["TestwiseHistoryReportMenu"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DatewiseReportMenuDataTable DatewiseReportMenu {
            get {
                return this.tableDatewiseReportMenu;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestwiseHistoryReportMenuDataTable TestwiseHistoryReportMenu {
            get {
                return this.tableTestwiseHistoryReportMenu;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsReportMenu cln = ((dsReportMenu)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DatewiseReportMenu"] != null)) {
                    base.Tables.Add(new DatewiseReportMenuDataTable(ds.Tables["DatewiseReportMenu"]));
                }
                if ((ds.Tables["TestwiseHistoryReportMenu"] != null)) {
                    base.Tables.Add(new TestwiseHistoryReportMenuDataTable(ds.Tables["TestwiseHistoryReportMenu"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDatewiseReportMenu = ((DatewiseReportMenuDataTable)(base.Tables["DatewiseReportMenu"]));
            if ((initTable == true)) {
                if ((this.tableDatewiseReportMenu != null)) {
                    this.tableDatewiseReportMenu.InitVars();
                }
            }
            this.tableTestwiseHistoryReportMenu = ((TestwiseHistoryReportMenuDataTable)(base.Tables["TestwiseHistoryReportMenu"]));
            if ((initTable == true)) {
                if ((this.tableTestwiseHistoryReportMenu != null)) {
                    this.tableTestwiseHistoryReportMenu.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsReportMenu";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsReportMenu.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDatewiseReportMenu = new DatewiseReportMenuDataTable();
            base.Tables.Add(this.tableDatewiseReportMenu);
            this.tableTestwiseHistoryReportMenu = new TestwiseHistoryReportMenuDataTable();
            base.Tables.Add(this.tableTestwiseHistoryReportMenu);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDatewiseReportMenu() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestwiseHistoryReportMenu() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsReportMenu ds = new dsReportMenu();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DatewiseReportMenuRowChangeEventHandler(object sender, DatewiseReportMenuRowChangeEvent e);
        
        public delegate void TestwiseHistoryReportMenuRowChangeEventHandler(object sender, TestwiseHistoryReportMenuRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DatewiseReportMenuDataTable : global::System.Data.TypedTableBase<DatewiseReportMenuRow> {
            
            private global::System.Data.DataColumn columnTestDate;
            
            private global::System.Data.DataColumn columnLabNo;
            
            private global::System.Data.DataColumn columnTestName;
            
            private global::System.Data.DataColumn columnTestHeadCode;
            
            private global::System.Data.DataColumn columnIsApp;
            
            private global::System.Data.DataColumn columnIsOPDCreditBal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DatewiseReportMenuDataTable() {
                this.TableName = "DatewiseReportMenu";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DatewiseReportMenuDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DatewiseReportMenuDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestDateColumn {
                get {
                    return this.columnTestDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabNoColumn {
                get {
                    return this.columnLabNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestNameColumn {
                get {
                    return this.columnTestName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestHeadCodeColumn {
                get {
                    return this.columnTestHeadCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAppColumn {
                get {
                    return this.columnIsApp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOPDCreditBalColumn {
                get {
                    return this.columnIsOPDCreditBal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DatewiseReportMenuRow this[int index] {
                get {
                    return ((DatewiseReportMenuRow)(this.Rows[index]));
                }
            }
            
            public event DatewiseReportMenuRowChangeEventHandler DatewiseReportMenuRowChanging;
            
            public event DatewiseReportMenuRowChangeEventHandler DatewiseReportMenuRowChanged;
            
            public event DatewiseReportMenuRowChangeEventHandler DatewiseReportMenuRowDeleting;
            
            public event DatewiseReportMenuRowChangeEventHandler DatewiseReportMenuRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDatewiseReportMenuRow(DatewiseReportMenuRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DatewiseReportMenuRow AddDatewiseReportMenuRow(string TestDate, string LabNo, string TestName, string TestHeadCode, string IsApp, string IsOPDCreditBal) {
                DatewiseReportMenuRow rowDatewiseReportMenuRow = ((DatewiseReportMenuRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestDate,
                        LabNo,
                        TestName,
                        TestHeadCode,
                        IsApp,
                        IsOPDCreditBal};
                rowDatewiseReportMenuRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDatewiseReportMenuRow);
                return rowDatewiseReportMenuRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DatewiseReportMenuDataTable cln = ((DatewiseReportMenuDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DatewiseReportMenuDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTestDate = base.Columns["TestDate"];
                this.columnLabNo = base.Columns["LabNo"];
                this.columnTestName = base.Columns["TestName"];
                this.columnTestHeadCode = base.Columns["TestHeadCode"];
                this.columnIsApp = base.Columns["IsApp"];
                this.columnIsOPDCreditBal = base.Columns["IsOPDCreditBal"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTestDate = new global::System.Data.DataColumn("TestDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestDate);
                this.columnLabNo = new global::System.Data.DataColumn("LabNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabNo);
                this.columnTestName = new global::System.Data.DataColumn("TestName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestName);
                this.columnTestHeadCode = new global::System.Data.DataColumn("TestHeadCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestHeadCode);
                this.columnIsApp = new global::System.Data.DataColumn("IsApp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsApp);
                this.columnIsOPDCreditBal = new global::System.Data.DataColumn("IsOPDCreditBal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOPDCreditBal);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DatewiseReportMenuRow NewDatewiseReportMenuRow() {
                return ((DatewiseReportMenuRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DatewiseReportMenuRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DatewiseReportMenuRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DatewiseReportMenuRowChanged != null)) {
                    this.DatewiseReportMenuRowChanged(this, new DatewiseReportMenuRowChangeEvent(((DatewiseReportMenuRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DatewiseReportMenuRowChanging != null)) {
                    this.DatewiseReportMenuRowChanging(this, new DatewiseReportMenuRowChangeEvent(((DatewiseReportMenuRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DatewiseReportMenuRowDeleted != null)) {
                    this.DatewiseReportMenuRowDeleted(this, new DatewiseReportMenuRowChangeEvent(((DatewiseReportMenuRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DatewiseReportMenuRowDeleting != null)) {
                    this.DatewiseReportMenuRowDeleting(this, new DatewiseReportMenuRowChangeEvent(((DatewiseReportMenuRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDatewiseReportMenuRow(DatewiseReportMenuRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsReportMenu ds = new dsReportMenu();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DatewiseReportMenuDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestwiseHistoryReportMenuDataTable : global::System.Data.TypedTableBase<TestwiseHistoryReportMenuRow> {
            
            private global::System.Data.DataColumn columnTestCount;
            
            private global::System.Data.DataColumn columnTestGroup;
            
            private global::System.Data.DataColumn columnTestHeadName;
            
            private global::System.Data.DataColumn columnTestName;
            
            private global::System.Data.DataColumn columnTestDate;
            
            private global::System.Data.DataColumn columnIsOPDCreditBal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestwiseHistoryReportMenuDataTable() {
                this.TableName = "TestwiseHistoryReportMenu";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestwiseHistoryReportMenuDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestwiseHistoryReportMenuDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestCountColumn {
                get {
                    return this.columnTestCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestGroupColumn {
                get {
                    return this.columnTestGroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestHeadNameColumn {
                get {
                    return this.columnTestHeadName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestNameColumn {
                get {
                    return this.columnTestName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestDateColumn {
                get {
                    return this.columnTestDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOPDCreditBalColumn {
                get {
                    return this.columnIsOPDCreditBal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestwiseHistoryReportMenuRow this[int index] {
                get {
                    return ((TestwiseHistoryReportMenuRow)(this.Rows[index]));
                }
            }
            
            public event TestwiseHistoryReportMenuRowChangeEventHandler TestwiseHistoryReportMenuRowChanging;
            
            public event TestwiseHistoryReportMenuRowChangeEventHandler TestwiseHistoryReportMenuRowChanged;
            
            public event TestwiseHistoryReportMenuRowChangeEventHandler TestwiseHistoryReportMenuRowDeleting;
            
            public event TestwiseHistoryReportMenuRowChangeEventHandler TestwiseHistoryReportMenuRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestwiseHistoryReportMenuRow(TestwiseHistoryReportMenuRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestwiseHistoryReportMenuRow AddTestwiseHistoryReportMenuRow(int TestCount, string TestGroup, string TestHeadName, string TestName, string TestDate, string IsOPDCreditBal) {
                TestwiseHistoryReportMenuRow rowTestwiseHistoryReportMenuRow = ((TestwiseHistoryReportMenuRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestCount,
                        TestGroup,
                        TestHeadName,
                        TestName,
                        TestDate,
                        IsOPDCreditBal};
                rowTestwiseHistoryReportMenuRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestwiseHistoryReportMenuRow);
                return rowTestwiseHistoryReportMenuRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestwiseHistoryReportMenuRow FindByTestGroup(string TestGroup) {
                return ((TestwiseHistoryReportMenuRow)(this.Rows.Find(new object[] {
                            TestGroup})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestwiseHistoryReportMenuDataTable cln = ((TestwiseHistoryReportMenuDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestwiseHistoryReportMenuDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTestCount = base.Columns["TestCount"];
                this.columnTestGroup = base.Columns["TestGroup"];
                this.columnTestHeadName = base.Columns["TestHeadName"];
                this.columnTestName = base.Columns["TestName"];
                this.columnTestDate = base.Columns["TestDate"];
                this.columnIsOPDCreditBal = base.Columns["IsOPDCreditBal"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTestCount = new global::System.Data.DataColumn("TestCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCount);
                this.columnTestGroup = new global::System.Data.DataColumn("TestGroup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestGroup);
                this.columnTestHeadName = new global::System.Data.DataColumn("TestHeadName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestHeadName);
                this.columnTestName = new global::System.Data.DataColumn("TestName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestName);
                this.columnTestDate = new global::System.Data.DataColumn("TestDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestDate);
                this.columnIsOPDCreditBal = new global::System.Data.DataColumn("IsOPDCreditBal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOPDCreditBal);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestGroup}, true));
                this.columnTestGroup.AllowDBNull = false;
                this.columnTestGroup.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestwiseHistoryReportMenuRow NewTestwiseHistoryReportMenuRow() {
                return ((TestwiseHistoryReportMenuRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestwiseHistoryReportMenuRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestwiseHistoryReportMenuRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestwiseHistoryReportMenuRowChanged != null)) {
                    this.TestwiseHistoryReportMenuRowChanged(this, new TestwiseHistoryReportMenuRowChangeEvent(((TestwiseHistoryReportMenuRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestwiseHistoryReportMenuRowChanging != null)) {
                    this.TestwiseHistoryReportMenuRowChanging(this, new TestwiseHistoryReportMenuRowChangeEvent(((TestwiseHistoryReportMenuRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestwiseHistoryReportMenuRowDeleted != null)) {
                    this.TestwiseHistoryReportMenuRowDeleted(this, new TestwiseHistoryReportMenuRowChangeEvent(((TestwiseHistoryReportMenuRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestwiseHistoryReportMenuRowDeleting != null)) {
                    this.TestwiseHistoryReportMenuRowDeleting(this, new TestwiseHistoryReportMenuRowChangeEvent(((TestwiseHistoryReportMenuRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestwiseHistoryReportMenuRow(TestwiseHistoryReportMenuRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsReportMenu ds = new dsReportMenu();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestwiseHistoryReportMenuDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DatewiseReportMenuRow : global::System.Data.DataRow {
            
            private DatewiseReportMenuDataTable tableDatewiseReportMenu;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DatewiseReportMenuRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDatewiseReportMenu = ((DatewiseReportMenuDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestDate {
                get {
                    try {
                        return ((string)(this[this.tableDatewiseReportMenu.TestDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestDate\' in table \'DatewiseReportMenu\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatewiseReportMenu.TestDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LabNo {
                get {
                    try {
                        return ((string)(this[this.tableDatewiseReportMenu.LabNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LabNo\' in table \'DatewiseReportMenu\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatewiseReportMenu.LabNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestName {
                get {
                    try {
                        return ((string)(this[this.tableDatewiseReportMenu.TestNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestName\' in table \'DatewiseReportMenu\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatewiseReportMenu.TestNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestHeadCode {
                get {
                    try {
                        return ((string)(this[this.tableDatewiseReportMenu.TestHeadCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestHeadCode\' in table \'DatewiseReportMenu\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatewiseReportMenu.TestHeadCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsApp {
                get {
                    try {
                        return ((string)(this[this.tableDatewiseReportMenu.IsAppColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsApp\' in table \'DatewiseReportMenu\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatewiseReportMenu.IsAppColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsOPDCreditBal {
                get {
                    try {
                        return ((string)(this[this.tableDatewiseReportMenu.IsOPDCreditBalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOPDCreditBal\' in table \'DatewiseReportMenu\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatewiseReportMenu.IsOPDCreditBalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestDateNull() {
                return this.IsNull(this.tableDatewiseReportMenu.TestDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestDateNull() {
                this[this.tableDatewiseReportMenu.TestDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabNoNull() {
                return this.IsNull(this.tableDatewiseReportMenu.LabNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabNoNull() {
                this[this.tableDatewiseReportMenu.LabNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestNameNull() {
                return this.IsNull(this.tableDatewiseReportMenu.TestNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestNameNull() {
                this[this.tableDatewiseReportMenu.TestNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestHeadCodeNull() {
                return this.IsNull(this.tableDatewiseReportMenu.TestHeadCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestHeadCodeNull() {
                this[this.tableDatewiseReportMenu.TestHeadCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsAppNull() {
                return this.IsNull(this.tableDatewiseReportMenu.IsAppColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsAppNull() {
                this[this.tableDatewiseReportMenu.IsAppColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOPDCreditBalNull() {
                return this.IsNull(this.tableDatewiseReportMenu.IsOPDCreditBalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOPDCreditBalNull() {
                this[this.tableDatewiseReportMenu.IsOPDCreditBalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestwiseHistoryReportMenuRow : global::System.Data.DataRow {
            
            private TestwiseHistoryReportMenuDataTable tableTestwiseHistoryReportMenu;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestwiseHistoryReportMenuRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestwiseHistoryReportMenu = ((TestwiseHistoryReportMenuDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestCount {
                get {
                    try {
                        return ((int)(this[this.tableTestwiseHistoryReportMenu.TestCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestCount\' in table \'TestwiseHistoryReportMenu\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestwiseHistoryReportMenu.TestCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestGroup {
                get {
                    return ((string)(this[this.tableTestwiseHistoryReportMenu.TestGroupColumn]));
                }
                set {
                    this[this.tableTestwiseHistoryReportMenu.TestGroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestHeadName {
                get {
                    try {
                        return ((string)(this[this.tableTestwiseHistoryReportMenu.TestHeadNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestHeadName\' in table \'TestwiseHistoryReportMenu\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTestwiseHistoryReportMenu.TestHeadNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestName {
                get {
                    try {
                        return ((string)(this[this.tableTestwiseHistoryReportMenu.TestNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestName\' in table \'TestwiseHistoryReportMenu\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestwiseHistoryReportMenu.TestNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestDate {
                get {
                    try {
                        return ((string)(this[this.tableTestwiseHistoryReportMenu.TestDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestDate\' in table \'TestwiseHistoryReportMenu\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestwiseHistoryReportMenu.TestDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsOPDCreditBal {
                get {
                    try {
                        return ((string)(this[this.tableTestwiseHistoryReportMenu.IsOPDCreditBalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOPDCreditBal\' in table \'TestwiseHistoryReportMenu\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableTestwiseHistoryReportMenu.IsOPDCreditBalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestCountNull() {
                return this.IsNull(this.tableTestwiseHistoryReportMenu.TestCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestCountNull() {
                this[this.tableTestwiseHistoryReportMenu.TestCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestHeadNameNull() {
                return this.IsNull(this.tableTestwiseHistoryReportMenu.TestHeadNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestHeadNameNull() {
                this[this.tableTestwiseHistoryReportMenu.TestHeadNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestNameNull() {
                return this.IsNull(this.tableTestwiseHistoryReportMenu.TestNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestNameNull() {
                this[this.tableTestwiseHistoryReportMenu.TestNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestDateNull() {
                return this.IsNull(this.tableTestwiseHistoryReportMenu.TestDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestDateNull() {
                this[this.tableTestwiseHistoryReportMenu.TestDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOPDCreditBalNull() {
                return this.IsNull(this.tableTestwiseHistoryReportMenu.IsOPDCreditBalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOPDCreditBalNull() {
                this[this.tableTestwiseHistoryReportMenu.IsOPDCreditBalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DatewiseReportMenuRowChangeEvent : global::System.EventArgs {
            
            private DatewiseReportMenuRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DatewiseReportMenuRowChangeEvent(DatewiseReportMenuRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DatewiseReportMenuRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestwiseHistoryReportMenuRowChangeEvent : global::System.EventArgs {
            
            private TestwiseHistoryReportMenuRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestwiseHistoryReportMenuRowChangeEvent(TestwiseHistoryReportMenuRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestwiseHistoryReportMenuRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591